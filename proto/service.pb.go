// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/service.proto

package hello

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HelloService service

type HelloServiceClient interface {
	Hello(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error)
}

type helloServiceClient struct {
	cc *grpc.ClientConn
}

func NewHelloServiceClient(cc *grpc.ClientConn) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) Hello(ctx context.Context, in *StringMessage, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := grpc.Invoke(ctx, "/grpcdemo.hello.HelloService/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HelloService service

type HelloServiceServer interface {
	Hello(context.Context, *StringMessage) (*StringMessage, error)
}

func RegisterHelloServiceServer(s *grpc.Server, srv HelloServiceServer) {
	s.RegisterService(&_HelloService_serviceDesc, srv)
}

func _HelloService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcdemo.hello.HelloService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).Hello(ctx, req.(*StringMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _HelloService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcdemo.hello.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _HelloService_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

func init() { proto.RegisterFile("proto/service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0xf3, 0x84, 0xf8, 0xd2, 0x8b,
	0x0a, 0x92, 0x53, 0x52, 0x73, 0xf3, 0xf5, 0x32, 0x52, 0x73, 0x72, 0xf2, 0xa5, 0x04, 0x21, 0x8a,
	0xc0, 0x1c, 0x88, 0x12, 0xa3, 0x50, 0x2e, 0x1e, 0x0f, 0x10, 0x37, 0x18, 0xa2, 0x51, 0xc8, 0x95,
	0x8b, 0x15, 0xcc, 0x17, 0x92, 0xd5, 0x43, 0xd5, 0xac, 0x17, 0x5c, 0x52, 0x94, 0x99, 0x97, 0xee,
	0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x2a, 0x85, 0x5f, 0xda, 0x89, 0x3d, 0x8a, 0x15, 0x2c, 0x9c,
	0xc4, 0x06, 0xb6, 0xc6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x87, 0x64, 0xe6, 0xa0, 0x00,
	0x00, 0x00,
}
